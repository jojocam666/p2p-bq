import cryptowia
from time import time


class Transaction:
  def__init__(self):
    self.inputs = []
    self.outputs = []
   
   
   def randomCryptoNumber():
    return RNG.new().read(AES.block_size) #Retourne un nombre aléatoire

  
  def append_data(data):
    # si la taille de donnée fait 16 byte, aucun ajout
    if len(data) % 16 == 0:
        return data

    # On enlève un byte pour ajouter le 0x80

    dataAppend = 15 - (len(data) % 16)

    data = '%s\x80' % data
    data = '%s%s' % (data, '\x00' * dataAjouter)

    return data  
  
  def remove_data(data):
  if not data:
      return data

  data = data.rstrip('\x00')
  if data[-1] == '\x80':
      return data[:-1]
  else:
      return data
  
 

def generateCryptoKey():
    key_size = 32
    random_key = str(RNG.new().read(key_size))
    return random_key  
  
 import Crypto.Cipher.AES as AES

def encrypt_aes(data, random_key):

  #Encrypte les donnée utilisant AES en mode CBC

  data = append_data(data)
  number = randomCryptoNumber()
  aes = AES.new(random_key, AES.MODE_CBC, number)
  msg_crypt = aes.encrypt(data)

  return number + msg_crypt

def decrypt_aes(ciphertext, random_key):

  #Decrypt un ciphertext encrypté avec l'AES en mode CBC

  if len(ciphertext) <= AES.block_size:
      raise Exception("Invalid ciphertext.")
  number = ciphertext[:AES.block_size]
  ciphertext = ciphertext[AES.block_size:]
  aes = AES.new(random_key, AES.MODE_CBC, number)
  data = aes.decrypt(ciphertext)

  return remove_data(data) #Enleve le padding ajouté
  
  
  
   
   
   
    
def new_transaction(self,sender_public,sender_private,recipient,amount):
  """
        Creates a new transaction to go into the next mined Block
        :param sender: Address of the Sender
        :param amount_send: The amount sent by the sender
        :param bpsc: Address of the Smart contract (bpsc)
        :param amount_bpsc: The amount received by bpsc (Transaction fees)
        :param recipient: Address of the Recipient
        :param amount_receive: The amount received by the recipient
        :return: The index of the Block that will hold this transaction
        """
  
  
  
  values = request.get_json()

    # Check that the required fields are in the POST'ed data
    required = ['sender', 'amount', 'recipient']
    if not all(k in values for k in required):
        return 'Missing values', 400

    # Create a new Transaction
    index = blockchain.new_transaction(values['sender'], values['amount'], values['recipient'])
  
 
 
 transaction = {
            'id':str(os unrandom(32)),
            'hash': hash(id,data), 
            
            'data': {
                "inputs": [ #a previous  unspent transaction 
                    {
                     "transaction": previous_unspent_output_hash, # transaction hash taken from a previous unspent transaction output (64 bytes)
                     "index": previous_unspent_output_index, # index of the transaction taken from a previous unspent transaction output
                     "amount": self.amount, # amount of lios
                     "address": self.address, # from address (64 bytes)
                     "signature": signature_data(transaction_input) # transaction input hash: sha256 (transaction + index + amount + address) signed with owner address's secret key (128 bytes)
                    }
            ],
    
        
        
                "outputs": [  #Transaction outputs
                    {
                        "amount_fees": fees or amount * fees_rate, #amount of lios taken
                        "bpsc": 'bpsc_wallet_address', # Block Producer Smart Contract (bpsc)
                    },
                    {
                        "final_amount": "amount"-"amount_fees", # amount of lios received
                        "address": new_address(self) # change address (64 bytes)
                    },
                    {
                        "refund_amount": refund,
                        "address": self.sender,
                    }
            
            
            'sender': sender,
            'amount_send': amount,
             
            'bpsc': 'bpsc_wallet_address', # Block Producer Smart Contract (bpsc)
            'amount_bpsc': amount * 0.00005, # Transaction fees
            'time': str(datetime.datetime.now())
            'recipient': recipient_address,
            'amount_receive': amount * 0.99995,
            'index' : self.last_block['index'] + 1
            ]
        })
   
          "crypted_transaction" : [
              'signature' : signature(data) ,
              'cipher_tras' : encrypt_aes(data, random_key),
              'cipher_key' : encrypt_rsa(random_key, recipient_address),
          ]
      
   } 
   
   
